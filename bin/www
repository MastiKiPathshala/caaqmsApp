#!/usr/bin/env node

log = require ('loglevel');

/*
 * Overwriting loglevel plugin to allow timestamp to be appended
 */

var originalFactory = log.methodFactory;

log.methodFactory = function (methodName, logLevel, loggerName) {

    var rawMethod = originalFactory(methodName, logLevel, loggerName);

    return function (message) {
        rawMethod("["+new Date()+"] caqms-web-app: " + message);
    };
};

/*
 * Setting up log level: "trace","debug","info","warn","error"
 */
log.setLevel('debug');

/*
 * Module dependencies.
 */
var http = require ('http');
var app = require ('../app');
var iotHub = require ('../routes/iothub_init');

/*
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/*
 * Configure iotHub for CAAQMS 
 */

iotHub.configure ();

/*
 * Create HTTP server.
 */

var server = http.createServer(app);
io = require('socket.io').listen(server);

/**
 * Global io socket
 */
ioSocket = null;

io.sockets.on('connection', function (socket) {

   log.trace('web-service: io socket connected');

   ioSocket = socket;

});


/*
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {

   var port = parseInt(val, 10);

   if (isNaN(port)) {
      // named pipe
      return val;
   }

   if (port >= 0) {
      // port number
      return port;
   }

   return false;
}

/*
 * Event listener for HTTP server "error" event.
 */

function onError(error) {

   if (error.syscall != 'listen') {
      throw error;
   }

   var bind = typeof port === 'string'
      ? 'Pipe ' + port
     : 'Port ' + port;

   // handle specific listen errors with friendly messages
   switch (error.code) {

   case 'EACCES':
       log.error (bind + ' requires elevated privileges');
       process.exit(1);
       break;

   case 'EADDRINUSE':
       log.error (bind + ' is already in use');
       process.exit(1);
       break;

   default:
       throw error;
   }
}

/*
 * Event listener for HTTP server "listening" event.
 */

function onListening() {

   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;

   log.info('listening on (' + bind + ')');
}
